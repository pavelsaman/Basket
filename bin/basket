#!/usr/bin/env perl

use strict;
use warnings;

use Readonly;
use Pod::Usage;
use Getopt::Long;
use List::MoreUtils qw(uniq);
use Basket 0.002;

our $VERSION = 0.003;

sub print_usage {
    my $usage_line = <<'END_USAGE';
Usage: basket [-l [-c category --before date --after date --dates]
               | -a -c category -i item
               | -d <-c category [ -i item ] | -i item>]
END_USAGE

    printf "%s", $usage_line;

    return;
}

sub print_help {
    my $help_message_start = <<'END_HELP_MSG_START';
Basket - keep track of your shopping lists
END_HELP_MSG_START
    my $help_message_end = <<'END_HELP_MSG_END';
Options:
    -l|--list       Lists all items, could be combined with:
                     -c|--category, --before, --after, --dates
    -a|--add        Adds a new item into a specified category
    -d|--delete     Deletes either the whole category (and therefore
                     all its items) or one item within a specified
                     category.

    -c|--category   Specifies a category name, could be used with --list,
                     has to be used with --add and --delete. Could be repeated
                     when used with --list and --delete without --item.
    -i|--item       Specifies an item, has to be used with --add and
                     with --delete when no --category is specified. Could be 
                     used (even mroe times) with --delete when --category
                     is specified.
    --before        Filters only items added before a certain date. Could 
                     be used with --list.
    --after         Filters only items added after a certain date. Could 
                     be used with --list.
    --dates         Prints when items were added along with their names. Could 
                     be used with --list.

    --usage         Prints the usage line.
    --help          Prints this message.
    --man           Prints the whole man page.
    --version       Prints the current version.    
END_HELP_MSG_END

    printf "%s\n", $help_message_start;
    print_usage();
    printf "\n%s", $help_message_end;

    return;
}

sub print_version {
    printf "%s: %.3f\n", qq{basket version:}, qq{$Basket::VERSION};

    return;
}

sub print_man {
    pod2usage(-exitval => 0, -verbose => 2);
}

sub pretty_print {
    my $data_ref    = shift;
    my $print_dates = shift;

    foreach my $cat (keys %$data_ref) {
        printf "%s:\n", $cat;
        foreach my $item (@{ $data_ref->{$cat}} ) {
            my @item_parts = split /;/, $item;
            printf " %s", $item_parts[0];
            if ($print_dates) {
                printf ";%s", $item_parts[1];
            }

            print "\n";
        }
    }

    return;
}

###############################################################################

# get command line options
my $result = GetOptions(
    # meta-options
    'usage'                => sub { print_usage();   exit 0; },
    'help'                 => sub { print_help();    exit 0; },
    'version'              => sub { print_version(); exit 0; },
    'man'                  => sub { print_man();     exit 0; },
    # behavioral options
    'l|list'               => \ my $list,
    'a|add'                => \ my $add,
    'd|delete'             => \ my $delete,
    'i|item=s{1,}'         => \ my @items,
    'c|cat|category=s{1,}' => \ my @categories,
    'after=s'              => \ my $after,
    'before=s'             => \ my $before,
    'dates'                => \ my $with_dates
);

# exactly one of --list, --delete, --add has to be given on the command line
my @given_verbs = grep { $_ } ($list, $add, $delete);

if (scalar @given_verbs != 1) {
    print_usage();
    exit 1;
}

if (not defined $ENV{BASKET_DIR}) {
    printf "%s\n%s\n", q{Environment variable BASKET_DIR is not set.},
        q{Basket doesn't know where your shopping lists are.};
    exit 1;
}

# substitude "~" at the beginning for $HOME
my $basket_dir = $ENV{BASKET_DIR};
$basket_dir =~ s{^[~]}{$ENV{HOME}}gxms;

my $basket = Basket->new({ dir => $basket_dir});

if ($list) {
    if (scalar @items != 0) {
        print_usage();
        exit 1;
    }

    my $result;    
    if (scalar @categories > 0) {
        $result = $basket->list({
            categories => [uniq @categories],
            before     => $before,
            after      => $after
        });
    }
    else {
        $result = $basket->list({ before => $before, after => $after});
    }
    
    pretty_print($result, $with_dates);
}
elsif ($add) {
    # both item(s) and category(ies) have to be specified
    # maximum 1 category can be specified
    if (scalar @items == 0 or scalar @categories != 1) {
        print_usage();
        exit 1;
    }

    # add all items into basket
    foreach my $item (@items) {
        $basket->add_item({ category => $categories[0], text => $item });
    }
}
else {
    # either item(s) or category(ies) has to be specified
    if ((scalar @items > 1 and scalar @categories > 1)
        or (scalar @items == 0 and scalar @categories == 0)) {
        print_usage();
        exit 1;
    }    
    
    # more categories to delete
    if (scalar @categories > 0 and scalar @items == 0) {
        foreach my $category (@categories) {
            $basket->delete_category({ category => $category });
        }
    }
    # delete item(s) from one category
    else {
        foreach my $item (@items) {
            $basket->delete_item({ category => $categories[0], text => $item });
        }        
    }
}

# save changes
$basket->save();

exit 0;

__END__

=pod

=encoding UTF-8

=head1 NAME

Basket - keep track of your shopping lists

=head1 VERSION

This document describes version 0.003

=head1 SYNOPSIS

    Usage: basket [-l [-c category --before date --after date --dates]
                   | -a -c category -i item
                   | -d <-c category [ -i item ] | -i item>]

    Options:
        -l|--list       Lists all items, could be combined with:
                         -c|--category, --before, --after, --dates
        -a|--add        Adds a new item into a specified category
        -d|--delete     Deletes either the whole category (and therefore
                         all its items) or one item within a specified
                         category.

        -c|--category   Specifies a category name, could be used with --list,
                         has to be used with --add and --delete. Could be repeated
                         when used with --list and --delete without --item.
        -i|--item       Specifies an item, has to be used with --add and
                         with --delete when no --category is specified. Could be 
                         used (even mroe times) with --delete when --category
                         is specified.
        --before        Filters only items added before a certain date. Could 
                         be used with --list.
        --after         Filters only items added after a certain date. Could 
                         be used with --list.
        --dates         Prints when items were added along with their names. Could 
                         be used with --list.

        --usage         Prints the usage line.
        --help          Prints this message.
        --man           Prints the whole man page.
        --version       Prints the current version.

=head1 DESCRIPTION

The B<basket> application takes care of your shopping lists in a text form. You 
can add items to categories, you can delete them, and of course list them at 
your will.

The app provides three main verbs that represent three actions that you can 
perform with your shopping lists:

    --list
    --add
    --delete

For more information on how to use them, see the Examples section, SYNOPSIS, 
help, or usage.

This application requires you set up an environment variable B<BASKET_DIR> with 
a path to a directory where shopping lists will be stored. If not set, the app 
will inform you upon startup and exit with an error code 1.

=head1 EXAMPLES

To add a new item to category electronics:

    $ basket --add --category electronics --item keyboard
    $ basket -a -c electronics -i keyboard

To see every item in every category:
    $ basket --list
    $ basket -l

To see every item in category electronics:

    $ basket -l -c electronics

To see every item added between 1st of March and 1st of April 
in category electronics:

    $ basket -l -c electronics --after 2020-03-01 --before 2020-04-01

To see everything after 1st of March:

    $ basket -l --after 2020-03-01

To add dates (of when items were added) to the previous output:

    $ basket -l -c electronics --after 2020-03-01 --before 2020-04-01 --dates

To delete one item from one category:

    $ basket --delete -i keyboard -c electronics
    $ basket -d -i keyboard -c electronics

To delete more items from all categories:

    $ bsket -d -i keyboard -i "cisco router"

To delete more items from one category:

    $ bsket -d -c electronics -i keyboard -i "cisco router"

To delete one category (and therefore all items from it):

    $ basket -d -c electronics

To delete more categories (and all items in them):

    $ basket -d -c electronics -c kitchen

=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests to C<pavelsam@centrum.cz>.

=head1 REPOSITORY

L<https://github.com/pavelsaman/Basket>

=head1 AUTHOR

Pavel Saman C<pavelsam@centrum.cz>

=head1 LICENCE AND COPYRIGHT

Copyright Â© 2020, Pavel Saman C<pavelsam@centrum.cz>. All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

=cut